# @version ^0.3.0

# state variables
balanceOf: public(HashMap[address, uint256])
allowance: public(HashMap[address, HashMap[address, uint256]])
totalSupply: public(uint256)
greypixel: address

event Transfer:
    sender: indexed(address)
    receiver: indexed(address)
    value: uint256

event Approval:
    owner: indexed(address)
    spender: indexed(address)
    value: uint256

# Functions
@view
@external
def name() -> String[28]:
    return "greypixel appreciation token"

@view
@external
def symbol() -> String[4]:
    return "GPXL"

@view
@external
def decimals() -> uint256:
    return 18

@external
def __init__():
    self.greypixel = 0x59B9FaC77b64Dcc0006207a2A41d90D96b3Bc301

# NOTE: allowance & balanceOf getter is auto generated by the public state variable.

@external
def transfer(_to: address, _value: uint256) -> bool:
    # underflow would revert.
    self.balanceOf[msg.sender] -= _value
    self.balanceOf[_to] += _value
    log Transfer(msg.sender, _to, _value)
    return True

@external
def transferFrom(_from: address, _to: address, _value: uint256) -> bool:
    self.balanceOf[_from] -= _value
    self.balanceOf[_to] += _value
    self.allowance[_from][msg.sender] -= _value
    log Transfer(_from, _to, _value)
    return True

@external
def approve(_spender: address, _value: uint256) -> bool:
    self.allowance[msg.sender][_spender] += _value
    log Approval(msg.sender, _spender, _value)
    return True

@payable
@external
def appreciate(numTimes: uint256):
    # At least 0.025 ETH.
    assert msg.value >= 25000000000000000 * numTimes
    amt:uint256 = numTimes * 10 ** 18
    self.balanceOf[msg.sender] += amt
    self.totalSupply += amt
    log Transfer(ZERO_ADDRESS, msg.sender, amt)

@external
def withdrawAll():
    send(self.greypixel, self.balance)